#!/usr/bin/env ruby

require 'optparse'
require 'csv'

options = {}
options[:row_sep] = '\n'
optparse = OptionParser.new do |opts|
    opts.on('-f', '--fields 1,3,4', Array, 'Fields to cut') do |fields|
        options[:fields] = fields
    end

    opts.on('-d', '--delim DELIM', 'Column delimeter') do |delim|
        options[:col_sep] = delim
    end

    options[:quote_char] = '"'
    opts.on('-q', '--quote-char NUMBER', Integer, "number of files to send (default #{options[:number_of_files]})") do |number_of_files|
        options[:number_of_files] = number_of_files
    end

    opts.on('-h', '--help', 'Display this screen') do
        puts opts
        exit
    end
end

begin
    optparse.parse!
    mandatory = [:fields, :col_sep]                                         # Enforce the presence of
    missing = mandatory.select{ |param| options[param].nil? }        # the -t and -f switches
    if not missing.empty?                                            #
        puts "Missing options: #{missing.join(', ')}"                  #
        puts optparse                                                  #
        exit                                                           #
    end                                                              #
    rescue OptionParser::InvalidOption, OptionParser::MissingArgument      #
    puts $!.to_s                                                           # Friendly output when parsing fails
    puts optparse                                                          #
    exit                                                                   #
end                                                             #

#puts options
#puts options[:fields]

fields = options.delete(:fields)

ARGF.each do |line|
    begin
        row = CSV.parse_line(line, options)
        #puts row[5]
        puts fields.map {|i| "\"#{row[Integer(i)]}\"" }.join(options[:col_sep])
    rescue Errno::EPIPE
        break
    end
end

#CSV.parse(ARGF.read, options) do |line|
    #puts line[12]
 #   puts line
    #puts fields.map {|i| line[i] }.join(options[:row_sep])
#end

